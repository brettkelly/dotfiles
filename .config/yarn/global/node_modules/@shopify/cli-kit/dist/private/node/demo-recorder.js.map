{"version":3,"file":"demo-recorder.js","sourceRoot":"","sources":["../../../src/private/node/demo-recorder.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,QAAQ,EAAC,MAAM,wBAAwB,CAAA;AAoB/C,MAAM,YAAY;IAKhB;QACE,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAA;QAClB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;QAC5B,IAAI,CAAC,OAAO,GAAG,CAAC,SAAS,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IAChE,CAAC;IAED,QAAQ,CAAC,EAAC,IAAI,EAAE,UAAU,EAAQ;QAChC,IAAI,IAAI,KAAK,SAAS,EAAE;YACtB,IAAI,CAAC,UAAU,EAAE,CAAA;SAClB;aAAM;YACL,IAAI,CAAC,QAAQ,EAAE,CAAA;SAChB;QACD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,EAAC,CAAC,CAAA;QAC9E,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;IAC9B,CAAC;IAED,kBAAkB;QAChB,OAAO,IAAI,CAAC,SAAS,CACnB;YACE,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,KAAK,EAAE,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,QAAQ,CAAC;SACnD,EACD,IAAI,EACJ,CAAC,CACF,CAAA;IACH,CAAC;IAED,QAAQ;QACN,MAAM,QAAQ,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,CAAA;QACtD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;QAC5B,IAAI,QAAQ,GAAG,GAAG,EAAE;YAClB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,OAAO,EAAE,UAAU,EAAE,EAAC,QAAQ,EAAC,EAAC,CAAC,CAAA;SAC5D;IACH,CAAC;IAED,UAAU;QACR,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;IAC9B,CAAC;IAED,2BAA2B,CACzB,EACE,MAAM,EACN,KAAK,EACL,MAAM,GAKP,EACD,EAAC,MAAM,EAA4C;QAEnD,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;QAClD,IAAI,IAAI,EAAE,IAAI,KAAK,YAAY,EAAE;YAC/B,uCAAuC;YACvC,IAAI,CAAC,UAAU,EAAE,CAAA;SAClB;aAAM;YACL,MAAM,eAAe,GAAU;gBAC7B,IAAI,EAAE,YAAY;gBAClB,UAAU,EAAE,EAAC,SAAS,EAAE,EAAE,EAAE,gBAAgB,EAAE,IAAI,CAAC,GAAG,EAAE,EAAC;aAC1D,CAAA;YACD,IAAI,MAAM;gBAAE,eAAe,CAAC,UAAU,CAAC,MAAM,GAAG,MAAM,CAAA;YACtD,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAA;YAC9B,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;SAC/C;QACD,MAAM,EAAC,SAAS,EAAC,GAAG,IAAK,CAAC,UAA+C,CAAA;QACzE,OAAO,SAAS,CAAC,MAAM,IAAI,KAAK,EAAE;YAChC,SAAS,CAAC,IAAI,CAAC,EAAC,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAC,CAAC,CAAA;SACxC;QACD,SAAS,CAAC,KAAK,CAAE,CAAC,MAAM,GAAG,MAAM,CAAA;QACjC,SAAS,CAAC,KAAK,CAAE,CAAC,KAAK,CAAC,IAAI,CAAC,EAAC,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,UAAU,EAAE,MAAM,EAAC,CAAC,CAAA;IAC3E,CAAC;IAED,uBAAuB,CAAC,QAAiB;QACvC,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;YAC5B,IAAI,KAAK,CAAC,IAAI,KAAK,YAAY,EAAE;gBAC/B,MAAM,EAAC,SAAS,EAAE,MAAM,EAAE,gBAAgB,EAAC,GAAG,KAAK,CAAC,UAInD,CAAA;gBACD,MAAM,SAAS,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,EAAC,MAAM,EAAE,KAAK,EAA6C,EAAE,EAAE;oBAC9F,IAAI,mBAAmB,GAAG,gBAAgB,CAAA;oBAC1C,MAAM,cAAc,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,EAAC,SAAS,EAAE,UAAU,EAAC,EAAE,EAAE;wBAC3D,MAAM,QAAQ,GAAG,CAAC,SAAS,GAAG,mBAAmB,CAAC,GAAG,IAAI,CAAA;wBACzD,mBAAmB,GAAG,SAAS,CAAA;wBAC/B,OAAO,EAAC,QAAQ,EAAE,UAAU,EAAC,CAAA;oBAC/B,CAAC,CAAC,CAAA;oBACF,OAAO,EAAC,MAAM,EAAE,KAAK,EAAE,cAAc,EAAC,CAAA;gBACxC,CAAC,CAAC,CAAA;gBACF,OAAO,EAAC,IAAI,EAAE,YAAY,EAAE,UAAU,EAAE,EAAC,MAAM,EAAE,SAAS,EAAE,SAAS,EAAC,EAAC,CAAA;aACxE;YACD,OAAO,KAAK,CAAA;QACd,CAAC,CAAC,CAAA;IACJ,CAAC;CACF;AAED,MAAM,gBAAgB;IACpB,QAAQ,CAAC,MAAa,IAAG,CAAC;IAE1B,kBAAkB;QAChB,OAAO,IAAI,CAAC,SAAS,CAAC,EAAC,KAAK,EAAE,EAAE,EAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAA;IAC7C,CAAC;IAED,QAAQ,KAAI,CAAC;IACb,UAAU,KAAI,CAAC;IAEf,2BAA2B,CAAC,GAAG,KAAgB,IAAG,CAAC;CACpD;AAED,IAAI,SAiBH,CAAA;AAED,SAAS,cAAc;IACrB,IAAI,CAAC,SAAS,EAAE;QACd,IAAI,WAAW,EAAE,EAAE;YACjB,SAAS,GAAG,IAAI,YAAY,EAAE,CAAA;SAC/B;aAAM;YACL,SAAS,GAAG,IAAI,gBAAgB,EAAE,CAAA;SACnC;KACF;AACH,CAAC;AAED,MAAM,UAAU,gBAAgB;IAC9B,cAAc,EAAE,CAAA;AAClB,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,KAAY;IACxC,cAAc,EAAE,CAAA;IAChB,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;AAC3B,CAAC;AAED,MAAM,UAAU,kBAAkB;IAChC,cAAc,EAAE,CAAA;IAChB,SAAS,CAAC,UAAU,EAAE,CAAA;AACxB,CAAC;AAED,MAAM,UAAU,eAAe;IAC7B,IAAI,WAAW,EAAE,EAAE;QACjB,cAAc,EAAE,CAAA;QAChB,SAAS,CAAC,QAAQ,EAAE,CAAA;QACpB,sCAAsC;QACtC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,kBAAkB,EAAE,CAAC,CAAA;KAC5C;AACH,CAAC;AAED,MAAM,UAAU,kCAAkC,CAChD,IAIC,EACD,aAAwD;IAExD,cAAc,EAAE,CAAA;IAChB,SAAS,CAAC,2BAA2B,CAAC,IAAI,EAAE,aAAa,CAAC,CAAA;AAC5D,CAAC;AAED,SAAS,WAAW;IAClB,OAAO,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAA;AAC1C,CAAC","sourcesContent":["import {isTruthy} from './context/utilities.js'\nimport {ConcurrentOutputProps} from './ui/components/ConcurrentOutput.js'\n\ninterface Event {\n  type: string\n  properties: {[key: string]: unknown}\n  // Only used within this recorder for tracking concurrency timeline\n  concurrencyStart?: number\n}\n\ninterface ConcurrencyStep {\n  timestamp: number\n  endMessage: string\n}\n\ninterface ConcurrencyProcess {\n  prefix: string\n  steps: ConcurrencyStep[]\n}\n\nclass DemoRecorder {\n  recorded: Event[]\n  sleepStart: number\n  command: string\n\n  constructor() {\n    this.recorded = []\n    this.sleepStart = Date.now()\n    this.command = ['shopify', ...process.argv.slice(2)].join(' ')\n  }\n\n  addEvent({type, properties}: Event) {\n    if (type === 'taskbar') {\n      this.resetSleep()\n    } else {\n      this.addSleep()\n    }\n    this.recorded.push({type, properties: JSON.parse(JSON.stringify(properties))})\n    this.sleepStart = Date.now()\n  }\n\n  recordedEventsJson() {\n    return JSON.stringify(\n      {\n        command: this.command,\n        steps: this.withFormattedConcurrent(this.recorded),\n      },\n      null,\n      2,\n    )\n  }\n\n  addSleep() {\n    const duration = (Date.now() - this.sleepStart) / 1000\n    this.sleepStart = Date.now()\n    if (duration > 0.1) {\n      this.recorded.push({type: 'sleep', properties: {duration}})\n    }\n  }\n\n  resetSleep() {\n    this.sleepStart = Date.now()\n  }\n\n  addOrUpdateConcurrentOutput(\n    {\n      prefix,\n      index,\n      output,\n    }: {\n      prefix: string\n      index: number\n      output: string\n    },\n    {footer}: {footer: ConcurrentOutputProps['footer']},\n  ) {\n    let last = this.recorded[this.recorded.length - 1]\n    if (last?.type === 'concurrent') {\n      // Don't sleep between concurrent lines\n      this.resetSleep()\n    } else {\n      const eventProperties: Event = {\n        type: 'concurrent',\n        properties: {processes: [], concurrencyStart: Date.now()},\n      }\n      if (footer) eventProperties.properties.footer = footer\n      this.addEvent(eventProperties)\n      last = this.recorded[this.recorded.length - 1]\n    }\n    const {processes} = last!.properties as {processes: ConcurrencyProcess[]}\n    while (processes.length <= index) {\n      processes.push({prefix: '', steps: []})\n    }\n    processes[index]!.prefix = prefix\n    processes[index]!.steps.push({timestamp: Date.now(), endMessage: output})\n  }\n\n  withFormattedConcurrent(recorded: Event[]) {\n    return recorded.map((event) => {\n      if (event.type === 'concurrent') {\n        const {processes, footer, concurrencyStart} = event.properties as {\n          processes: ConcurrencyProcess[]\n          footer?: string\n          concurrencyStart: number\n        }\n        const formatted = processes.map(({prefix, steps}: {prefix: string; steps: ConcurrencyStep[]}) => {\n          let mostRecentTimestamp = concurrencyStart\n          const formattedSteps = steps.map(({timestamp, endMessage}) => {\n            const duration = (timestamp - mostRecentTimestamp) / 1000\n            mostRecentTimestamp = timestamp\n            return {duration, endMessage}\n          })\n          return {prefix, steps: formattedSteps}\n        })\n        return {type: 'concurrent', properties: {footer, processes: formatted}}\n      }\n      return event\n    })\n  }\n}\n\nclass NoopDemoRecorder {\n  addEvent(_event: Event) {}\n\n  recordedEventsJson() {\n    return JSON.stringify({steps: []}, null, 2)\n  }\n\n  addSleep() {}\n  resetSleep() {}\n\n  addOrUpdateConcurrentOutput(..._args: unknown[]) {}\n}\n\nlet _instance: {\n  addEvent: (event: Event) => void\n  recordedEventsJson: () => string\n  resetSleep: () => void\n  addSleep: () => void\n  addOrUpdateConcurrentOutput: (\n    {\n      prefix,\n      index,\n      output,\n    }: {\n      prefix: string\n      index: number\n      output: string\n    },\n    {footer}: {footer: ConcurrentOutputProps['footer']},\n  ) => void\n}\n\nfunction ensureInstance() {\n  if (!_instance) {\n    if (isRecording()) {\n      _instance = new DemoRecorder()\n    } else {\n      _instance = new NoopDemoRecorder()\n    }\n  }\n}\n\nexport function initDemoRecorder() {\n  ensureInstance()\n}\n\nexport function recordUIEvent(event: Event) {\n  ensureInstance()\n  _instance.addEvent(event)\n}\n\nexport function resetRecordedSleep() {\n  ensureInstance()\n  _instance.resetSleep()\n}\n\nexport function printEventsJson(): void {\n  if (isRecording()) {\n    ensureInstance()\n    _instance.addSleep()\n    // eslint-disable-next-line no-console\n    console.log(_instance.recordedEventsJson())\n  }\n}\n\nexport function addOrUpdateConcurrentUIEventOutput(\n  data: {\n    prefix: string\n    index: number\n    output: string\n  },\n  componentData: {footer: ConcurrentOutputProps['footer']},\n) {\n  ensureInstance()\n  _instance.addOrUpdateConcurrentOutput(data, componentData)\n}\n\nfunction isRecording() {\n  return isTruthy(process.env.RECORD_DEMO)\n}\n"]}