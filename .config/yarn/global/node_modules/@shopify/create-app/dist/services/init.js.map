{"version":3,"file":"init.js","sourceRoot":"","sources":["../../src/services/init.ts"],"names":[],"mappings":"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","sourcesContent":["import {getDeepInstallNPMTasks, updateCLIDependencies} from '../utils/template/npm.js'\nimport cleanup from '../utils/template/cleanup.js'\nimport {\n  findUpAndReadPackageJson,\n  packageManager,\n  PackageManager,\n  packageManagerUsedForCreating,\n  writePackageJSON,\n} from '@shopify/cli-kit/node/node-package-manager'\nimport {renderSuccess, renderTasks, Task} from '@shopify/cli-kit/node/ui'\nimport {parseGitHubRepositoryReference} from '@shopify/cli-kit/node/github'\nimport {hyphenate} from '@shopify/cli-kit/common/string'\nimport {recursiveLiquidTemplateCopy} from '@shopify/cli-kit/node/liquid'\nimport {isShopify} from '@shopify/cli-kit/node/context/local'\nimport {downloadGitRepository, initializeGitRepository} from '@shopify/cli-kit/node/git'\nimport {appendFile, fileExists, inTemporaryDirectory, mkdir, moveFile, writeFile} from '@shopify/cli-kit/node/fs'\nimport {joinPath} from '@shopify/cli-kit/node/path'\nimport {username} from '@shopify/cli-kit/node/os'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {formatPackageManagerCommand} from '@shopify/cli-kit/node/output'\n\ninterface InitOptions {\n  name: string\n  directory: string\n  template: string\n  packageManager: string | undefined\n  local: boolean\n}\n\nasync function init(options: InitOptions) {\n  const packageManager: PackageManager = inferPackageManager(options.packageManager)\n  const hyphenizedName = hyphenate(options.name)\n  const outputDirectory = joinPath(options.directory, hyphenizedName)\n  const githubRepo = parseGitHubRepositoryReference(options.template)\n\n  await ensureAppDirectoryIsAvailable(outputDirectory, hyphenizedName)\n\n  await inTemporaryDirectory(async (tmpDir) => {\n    const templateDownloadDir = joinPath(tmpDir, 'download')\n    const templatePathDir = githubRepo.filePath\n      ? joinPath(templateDownloadDir, githubRepo.filePath)\n      : templateDownloadDir\n    const templateScaffoldDir = joinPath(tmpDir, 'app')\n    const repoUrl = githubRepo.branch ? `${githubRepo.baseURL}#${githubRepo.branch}` : githubRepo.baseURL\n\n    await mkdir(templateDownloadDir)\n    const tasks: Task<unknown>[] = [\n      {\n        title: `Downloading template from ${repoUrl}`,\n        task: async () => {\n          await downloadGitRepository({\n            repoUrl,\n            destination: templateDownloadDir,\n            shallow: true,\n          })\n        },\n      },\n    ]\n\n    tasks.push(\n      {\n        title: 'Parsing liquid',\n        task: async () => {\n          await recursiveLiquidTemplateCopy(templatePathDir, templateScaffoldDir, {\n            dependency_manager: packageManager,\n            app_name: options.name,\n          })\n        },\n      },\n      {\n        title: 'Updating package.json',\n        task: async () => {\n          const packageJSON = (await findUpAndReadPackageJson(templateScaffoldDir)).content\n          packageJSON.name = hyphenizedName\n          packageJSON.author = (await username()) ?? ''\n          packageJSON.private = true\n\n          switch (packageManager) {\n            case 'npm':\n            case 'yarn':\n              packageJSON.workspaces = ['web', 'web/frontend', 'extensions/*']\n              break\n            case 'pnpm':\n              await writeFile(\n                joinPath(templateScaffoldDir, 'pnpm-workspace.yaml'),\n                `packages:\\n  - 'web'\\n  - 'web/frontend'\\n  - 'extensions/*'\\n`,\n              )\n              // Ensure that the installation of dependencies doesn't fail when using\n              // pnpm due to missing peerDependencies.\n              await appendFile(joinPath(templateScaffoldDir, '.npmrc'), `auto-install-peers=true\\n`)\n              break\n          }\n\n          await updateCLIDependencies({packageJSON, local: options.local, directory: templateScaffoldDir})\n          await writePackageJSON(templateScaffoldDir, packageJSON)\n        },\n      },\n    )\n\n    if (await isShopify()) {\n      tasks.push({\n        title: \"[Shopifolks-only] Configuring the project's NPM registry\",\n        task: async () => {\n          const npmrcPath = joinPath(templateScaffoldDir, '.npmrc')\n          const npmrcContent = `@shopify:registry=https://registry.npmjs.org\\n`\n          await appendFile(npmrcPath, npmrcContent)\n        },\n      })\n    }\n\n    tasks.push(\n      {\n        title: 'Installing dependencies',\n        task: async () => {\n          await getDeepInstallNPMTasks({from: templateScaffoldDir, packageManager})\n        },\n      },\n      {\n        title: 'Cleaning up',\n        task: async () => {\n          await cleanup(templateScaffoldDir)\n        },\n      },\n      {\n        title: 'Initializing a Git repository...',\n        task: async () => {\n          await initializeGitRepository(templateScaffoldDir)\n        },\n      },\n    )\n\n    await renderTasks(tasks)\n\n    await moveFile(templateScaffoldDir, outputDirectory)\n  })\n\n  renderSuccess({\n    headline: [{userInput: hyphenizedName}, 'is ready for you to build!'],\n    nextSteps: [\n      ['Run', {command: `cd ${hyphenizedName}`}],\n      ['For extensions, run', {command: formatPackageManagerCommand(packageManager, 'generate extension')}],\n      ['To see your app, run', {command: formatPackageManagerCommand(packageManager, 'dev')}],\n    ],\n    reference: [\n      {link: {label: 'Shopify docs', url: 'https://shopify.dev'}},\n      [\n        'For an overview of commands, run',\n        {command: `${formatPackageManagerCommand(packageManager, 'shopify app', '--help')}`},\n      ],\n    ],\n  })\n}\n\nfunction inferPackageManager(optionsPackageManager: string | undefined): PackageManager {\n  if (optionsPackageManager && packageManager.includes(optionsPackageManager as PackageManager)) {\n    return optionsPackageManager as PackageManager\n  }\n  const usedPackageManager = packageManagerUsedForCreating()\n  return usedPackageManager === 'unknown' ? 'npm' : usedPackageManager\n}\n\nasync function ensureAppDirectoryIsAvailable(directory: string, name: string): Promise<void> {\n  const exists = await fileExists(directory)\n  if (exists)\n    throw new AbortError(`\\nA directory with this name (${name}) already exists.\\nChoose a new name for your app.`)\n}\n\nexport default init\n"]}