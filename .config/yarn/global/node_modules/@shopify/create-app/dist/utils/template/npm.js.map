{"version":3,"file":"npm.js","sourceRoot":"","sources":["../../../src/utils/template/npm.ts"],"names":[],"mappings":"AAAA,OAAO,EAAiB,kBAAkB,EAAc,MAAM,4CAA4C,CAAA;AAC1G,OAAO,EAAC,eAAe,EAAC,MAAM,iCAAiC,CAAA;AAC/D,OAAO,EAAC,eAAe,EAAE,aAAa,EAAC,MAAM,4BAA4B,CAAA;AACzE,OAAO,EAAC,UAAU,EAAC,MAAM,0BAA0B,CAAA;AACnD,OAAO,EAAC,QAAQ,EAAC,MAAM,IAAI,CAAA;AAQ3B,MAAM,CAAC,KAAK,UAAU,qBAAqB,CAAC,EAAC,WAAW,EAAE,KAAK,EAA+B;IAC5F,WAAW,CAAC,YAAY,GAAG,WAAW,CAAC,YAAY,IAAI,EAAE,CAAA;IACzD,WAAW,CAAC,YAAY,CAAC,cAAc,CAAC,GAAG,eAAe,CAAA;IAC1D,WAAW,CAAC,YAAY,CAAC,cAAc,CAAC,GAAG,eAAe,CAAA;IAE1D,IAAI,KAAK,EAAE;QACT,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,KAAK,CAAC,CAAA;QACxC,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,KAAK,CAAC,CAAA;QACxC,MAAM,UAAU,GAAG,MAAM,WAAW,CAAC,SAAS,CAAC,CAAA;QAC/C,MAAM,eAAe,GAAG,MAAM,WAAW,CAAC,cAAc,CAAC,CAAA;QACzD,MAAM,oBAAoB,GAAG,MAAM,WAAW,CAAC,mBAAmB,CAAC,CAAA;QACnE,MAAM,cAAc,GAAG,MAAM,WAAW,CAAC,qBAAqB,CAAC,CAAA;QAE/D,kDAAkD;QAClD,WAAW,CAAC,YAAY,CAAC,cAAc,CAAC,GAAG,OAAO,CAAA;QAClD,kDAAkD;QAClD,WAAW,CAAC,YAAY,CAAC,cAAc,CAAC,GAAG,OAAO,CAAA;QAElD,MAAM,mBAAmB,GAAG;YAC1B,cAAc,EAAE,OAAO;YACvB,cAAc,EAAE,OAAO;YACvB,kBAAkB,EAAE,UAAU;YAC9B,uBAAuB,EAAE,eAAe;YACxC,8BAA8B,EAAE,cAAc;YAC9C,4BAA4B,EAAE,oBAAoB;SACnD,CAAA;QAED,WAAW,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS;YAC3C,CAAC,CAAC,EAAC,GAAG,WAAW,CAAC,SAAS,EAAE,GAAG,mBAAmB,EAAC;YACpD,CAAC,CAAC,mBAAmB,CAAA;QAEvB,WAAW,CAAC,WAAW,GAAG,WAAW,CAAC,WAAW;YAC/C,CAAC,CAAC,EAAC,GAAG,WAAW,CAAC,WAAW,EAAE,GAAG,mBAAmB,EAAC;YACtD,CAAC,CAAC,mBAAmB,CAAA;KACxB;IAED,OAAO,WAAW,CAAA;AACpB,CAAC;AAED,KAAK,UAAU,WAAW,CAAC,WAAmB;IAC5C,MAAM,mBAAmB,GAAG,CAAC,MAAM,UAAU,CAAC,YAAY,WAAW,EAAE,EAAE;QACvE,IAAI,EAAE,WAAW;QACjB,GAAG,EAAE,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;KACtC,CAAC,CAAW,CAAA;IACb,OAAO,QAAQ,mBAAmB,EAAE,CAAA;AACtC,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,sBAAsB,CAAC,EAC3C,IAAI,EACJ,cAAc,GAIf;IACC;;;;;;;;OAQG;IACH,MAAM,IAAI,GAAG,QAAQ,EAAE,KAAK,OAAO,IAAI,cAAc,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,uBAAuB,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAA;IACtG,OAAO,kBAAkB,CAAC,EAAC,SAAS,EAAE,aAAa,CAAC,IAAI,CAAC,EAAE,cAAc,EAAE,IAAI,EAAC,CAAC,CAAA;AACnF,CAAC","sourcesContent":["import {PackageManager, installNodeModules, PackageJson} from '@shopify/cli-kit/node/node-package-manager'\nimport {CLI_KIT_VERSION} from '@shopify/cli-kit/common/version'\nimport {moduleDirectory, normalizePath} from '@shopify/cli-kit/node/path'\nimport {findPathUp} from '@shopify/cli-kit/node/fs'\nimport {platform} from 'os'\n\ninterface UpdateCLIDependenciesOptions {\n  directory: string\n  packageJSON: PackageJson\n  local: boolean\n}\n\nexport async function updateCLIDependencies({packageJSON, local}: UpdateCLIDependenciesOptions): Promise<PackageJson> {\n  packageJSON.dependencies = packageJSON.dependencies || {}\n  packageJSON.dependencies['@shopify/cli'] = CLI_KIT_VERSION\n  packageJSON.dependencies['@shopify/app'] = CLI_KIT_VERSION\n\n  if (local) {\n    const cliPath = await packagePath('cli')\n    const appPath = await packagePath('app')\n    const cliKitPath = await packagePath('cli-kit')\n    const pluginNgrokPath = await packagePath('plugin-ngrok')\n    const pluginCloudflarePath = await packagePath('plugin-cloudflare')\n    const didYouMeanPath = await packagePath('plugin-did-you-mean')\n\n    // eslint-disable-next-line require-atomic-updates\n    packageJSON.dependencies['@shopify/cli'] = cliPath\n    // eslint-disable-next-line require-atomic-updates\n    packageJSON.dependencies['@shopify/app'] = appPath\n\n    const dependencyOverrides = {\n      '@shopify/cli': cliPath,\n      '@shopify/app': appPath,\n      '@shopify/cli-kit': cliKitPath,\n      '@shopify/plugin-ngrok': pluginNgrokPath,\n      '@shopify/plugin-did-you-mean': didYouMeanPath,\n      '@shopify/plugin-cloudflare': pluginCloudflarePath,\n    }\n\n    packageJSON.overrides = packageJSON.overrides\n      ? {...packageJSON.overrides, ...dependencyOverrides}\n      : dependencyOverrides\n\n    packageJSON.resolutions = packageJSON.resolutions\n      ? {...packageJSON.resolutions, ...dependencyOverrides}\n      : dependencyOverrides\n  }\n\n  return packageJSON\n}\n\nasync function packagePath(packageName: string): Promise<string> {\n  const packageAbsolutePath = (await findPathUp(`packages/${packageName}`, {\n    type: 'directory',\n    cwd: moduleDirectory(import.meta.url),\n  })) as string\n  return `file:${packageAbsolutePath}`\n}\n\nexport async function getDeepInstallNPMTasks({\n  from,\n  packageManager,\n}: {\n  from: string\n  packageManager: PackageManager\n}): Promise<void> {\n  /**\n   * Installation of dependencies using Yarn on Windows might lead\n   * to \"EPERM: operation not permitted, unlink\" errors when Yarn tries\n   * to access the cache. By limiting the network concurrency we mitigate the\n   * error:\n   *\n   * Failing scenario: https://github.com/Shopify/cli/runs/7913938724\n   * Reported issue: https://github.com/yarnpkg/yarn/issues/7212\n   */\n  const args = platform() === 'win32' && packageManager === 'yarn' ? ['--network-concurrency', '1'] : []\n  return installNodeModules({directory: normalizePath(from), packageManager, args})\n}\n"]}