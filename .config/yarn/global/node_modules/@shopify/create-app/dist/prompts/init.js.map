{"version":3,"file":"init.js","sourceRoot":"","sources":["../../src/prompts/init.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,iCAAiC,EAAC,MAAM,0BAA0B,CAAA;AAC1E,OAAO,EAAC,UAAU,EAAE,kBAAkB,EAAE,gBAAgB,EAAC,MAAM,0BAA0B,CAAA;AAazF,8DAA8D;AAC9D,wEAAwE;AACxE,MAAM,CAAC,MAAM,cAAc,GAAG;IAC5B,IAAI,EAAE,sDAAsD;IAC5D,GAAG,EAAE,qDAAqD;IAC1D,IAAI,EAAE,sDAAsD;CACpD,CAAA;AAEV,MAAM,IAAI,GAAG,KAAK,EAAE,OAAoB,EAAuB,EAAE;IAC/D,IAAI,IAAI,GAAG,OAAO,CAAC,IAAI,CAAA;IACvB,IAAI,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAA;IAE/B,MAAM,QAAQ,GAAG;QACf,IAAI,EAAE,MAAM,iCAAiC,CAAC,EAAC,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,CAAC,SAAS,EAAC,CAAC;QAC5F,QAAQ,EAAE,cAAc,CAAC,IAAI;KACrB,CAAA;IAEV,UAAU,CAAC,EAAC,IAAI,EAAE,mFAAmF,EAAC,CAAC,CAAA;IAEvG,IAAI,CAAC,IAAI,EAAE;QACT,IAAI,GAAG,MAAM,gBAAgB,CAAC;YAC5B,OAAO,EAAE,wBAAwB;YACjC,YAAY,EAAE,QAAQ,CAAC,IAAI;YAC3B,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE;gBAClB,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;oBACtB,OAAO,yBAAyB,CAAA;iBACjC;gBACD,IAAI,KAAK,CAAC,MAAM,GAAG,EAAE,EAAE;oBACrB,OAAO,0CAA0C,CAAA;iBAClD;gBACD,IAAI,KAAK,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;oBAC3C,OAAO,2CAA2C,CAAA;iBACnD;YACH,CAAC;SACF,CAAC,CAAA;KACH;IAED,IAAI,CAAC,QAAQ,EAAE;QACb,QAAQ,GAAG,MAAM,kBAAkB,CAAC;YAClC,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE;gBAC/C,OAAO;oBACL,KAAK,EAAE,GAAG;oBACV,KAAK,EAAE,GAAG;iBACX,CAAA;YACH,CAAC,CAAC;YACF,OAAO,EAAE,uCAAuC;YAChD,YAAY,EAAE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,CAC5C,CAAC,GAAG,EAAE,EAAE,CAAC,cAAc,CAAC,GAA8B,CAAC,KAAK,QAAQ,CAAC,QAAQ,CAC9E;SACF,CAAC,CAAA;KACH;IAED,MAAM,OAAO,GAAG;QACd,GAAG,OAAO;QACV,IAAI;QACJ,QAAQ;KACT,CAAA;IAED,MAAM,WAAW,GAAG,cAAc,CAAC,OAAO,CAAC,QAAuC,CAAC,CAAA;IACnF,OAAO,CAAC,QAAQ,GAAG,WAAW,IAAI,OAAO,CAAC,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAA;IAEvE,OAAO,OAAO,CAAA;AAChB,CAAC,CAAA;AAED,eAAe,IAAI,CAAA","sourcesContent":["import {generateRandomNameForSubdirectory} from '@shopify/cli-kit/node/fs'\nimport {renderText, renderSelectPrompt, renderTextPrompt} from '@shopify/cli-kit/node/ui'\n\ninterface InitOptions {\n  name?: string\n  template?: string\n  directory: string\n}\n\ninterface InitOutput {\n  name: string\n  template: string\n}\n\n// Eventually this list should be taken from a remote location\n// That way we don't have to update the CLI every time we add a template\nexport const templateURLMap = {\n  node: 'https://github.com/Shopify/shopify-app-template-node',\n  php: 'https://github.com/Shopify/shopify-app-template-php',\n  ruby: 'https://github.com/Shopify/shopify-app-template-ruby',\n} as const\n\nconst init = async (options: InitOptions): Promise<InitOutput> => {\n  let name = options.name\n  let template = options.template\n\n  const defaults = {\n    name: await generateRandomNameForSubdirectory({suffix: 'app', directory: options.directory}),\n    template: templateURLMap.node,\n  } as const\n\n  renderText({text: '\\nWelcome. Letâ€™s get started by naming your app project. You can change it later.'})\n\n  if (!name) {\n    name = await renderTextPrompt({\n      message: 'Your app project name?',\n      defaultValue: defaults.name,\n      validate: (value) => {\n        if (value.length === 0) {\n          return \"App name can't be empty\"\n        }\n        if (value.length > 30) {\n          return 'Enter a shorter name (30 character max.)'\n        }\n        if (value.toLowerCase().includes('shopify')) {\n          return \"App name can't include the word 'shopify'\"\n        }\n      },\n    })\n  }\n\n  if (!template) {\n    template = await renderSelectPrompt({\n      choices: Object.keys(templateURLMap).map((key) => {\n        return {\n          label: key,\n          value: key,\n        }\n      }),\n      message: 'Which template would you like to use?',\n      defaultValue: Object.keys(templateURLMap).find(\n        (key) => templateURLMap[key as 'node' | 'php' | 'ruby'] === defaults.template,\n      ),\n    })\n  }\n\n  const answers = {\n    ...options,\n    name,\n    template,\n  }\n\n  const templateURL = templateURLMap[answers.template as keyof typeof templateURLMap]\n  answers.template = templateURL || answers.template || defaults.template\n\n  return answers\n}\n\nexport default init\n"]}